/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 13 00:49:17 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.delete((-3331));
      int int0 = 429;
      aVLTree0.insert(429);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.insert((-3331));
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(1011);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1286);
      int int0 = (-1996);
      aVLTree0.insert((-1996));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      aVLTree0.delete((-103));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.key = 1;
      aVLTree0.height();
      aVLTree_Node1.left = aVLTree_Node0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.delete(1523);
      aVLTree0.insert(1523);
      aVLTree0.insert(1213);
      aVLTree0.insert((-2423));
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-907));
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-2251);
      int int1 = 1;
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      int int2 = (-1);
      aVLTree0.insert((-1));
      aVLTree0.delete((-2251));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree_Node0.left = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      aVLTree_Node1.left = aVLTree_Node0;
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1286);
      int int0 = (-1996);
      aVLTree0.insert((-1996));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      aVLTree0.delete((-103));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.key = 1;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.height();
      aVLTree_Node1.left = aVLTree_Node0;
      // Undeclared exception!
      aVLTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.delete(0);
      aVLTree0.insert((-2103));
      aVLTree0.delete((-1));
      int int0 = 1784;
      aVLTree0.find(1784);
      aVLTree0.insert((-1));
      aVLTree0.delete((-3423));
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.insert((-1334));
      aVLTree0.insert(680);
      aVLTree0.insert(1110);
      aVLTree0.getRoot();
      aVLTree0.delete((-1));
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.delete(562);
      aVLTree0.find((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 2017;
      aVLTree0.insert(2017);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
      int int1 = 1940;
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(1940);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node1.height = 1940;
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-227));
      aVLTree0.delete(193);
      aVLTree0.insert(0);
      aVLTree0.insert((-227));
      aVLTree0.insert(2593);
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.insert((-1133));
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(1);
      aVLTree_Node2.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.delete(0);
      aVLTree0.insert(402);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(248);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.delete(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1647);
      aVLTree0.delete(0);
      aVLTree0.delete(2806);
      aVLTree0.delete(1647);
      int int0 = (-1861);
      aVLTree0.insert(0);
      aVLTree0.insert((-1861));
      aVLTree0.find(1647);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.delete(0);
      aVLTree0.insert((-2103));
      aVLTree0.delete((-1));
      int int0 = 1784;
      aVLTree0.find(1784);
      aVLTree0.insert((-1));
      aVLTree0.delete((-1));
      aVLTree0.delete((-3423));
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete(0);
      aVLTree0.insert((-1334));
      aVLTree0.insert(680);
      aVLTree0.insert(1110);
      aVLTree0.getRoot();
      aVLTree0.delete((-1));
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.delete(562);
      aVLTree0.find((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2017);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(1940);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.delete(2017);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(1);
      aVLTree_Node0.height = (-208);
      aVLTree0.find(2017);
      aVLTree0.height();
      aVLTree_Node0.key = (-1);
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.height();
      aVLTree0.find(1940);
      aVLTree0.delete(1);
      aVLTree0.insert(1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2017);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
      int int0 = 1940;
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(1940);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.delete(0);
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree0.delete(2017);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(0);
      aVLTree_Node0.height = (-208);
      aVLTree_Node1.left = aVLTree_Node0.right;
      aVLTree0.height();
      aVLTree_Node0.key = (-1);
      int int1 = (-1);
      // Undeclared exception!
      aVLTree0.delete((-1));
  }
}
